{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","react_default","a","createElement","className","href","this","props","totalCounters","Component","Counter","_this","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","count","Counters","onReset","counters","map","components_counter","key","App","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","setState","handleDelete","counterID","filter","c","handleReset","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13513cbd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass NavBar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          Navbar{\" \"}\r\n          <span className=\"badge badge-pill badge-secondary\">\r\n            {this.props.totalCounters}\r\n          </span>\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  // constructor() {\r\n  //   super();\r\n  //   this.handleIncrement = this.handleIncrement.bind(this);\r\n  // }\r\n  render() {\r\n    return (\r\n      <div className=\"container mt-2\">\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value: count } = this.props.counter;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={this.props.onReset}\r\n          className=\"btn btn-primary btn-sm m-2 ml-5\"\r\n        >\r\n          Reset\r\n        </button>\r\n        {this.props.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={this.props.onDelete}\r\n            onIncrement={this.props.onIncrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDelete = counterID => {\n    const counters = this.state.counters.filter(c => c.id !== counterID);\n    this.setState({ counters });\n  };\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}